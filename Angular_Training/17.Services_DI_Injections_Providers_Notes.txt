Dependency Injection  and Services in Angular
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--> Dependencies are services or objects that a class needs to perform its function. 

--> Dependency injection, or DI, is a design pattern in which a class requests dependencies from external sources rather than creating them.

--> Angular's DI framework provides dependencies to a class upon instantiation. Use Angular DI to increase flexibility and modularity in your applications.



What is Service and Why it is required?


--> A Service is a class that provide common functionality which can be used by other programming items of Angular Application. (Eg:  Components, Service, Directive, etc...)

--> Service class are decorate with @Injectable()


Pre-defined Service in Angular
~~~~~~~~~~~~~~~~~~~~~~~~
1.  HttpClient
2.  ActivatedRoute
3.  Router
4.  ElementRef
5.  TemplateRef
6.   ViewContainerRef



How to create Services?

	ng g s db
	ng g s data
	ng g s user
	....
	
	
	>	File:		user.service.ts
	
	import { Injectable } from '@angular/core';

	@Injectable({
	  providedIn: 'root'
	})
	export class UserService {

	  constructor() { }
	}




Note:

-->  The @Injectable() decorator specifies that Angular can use this class in the DI system. 


Service Injection
~~~~~~~~~~~~~

	constructor(private  serviceObj:ServiceClassName)
	{
				
	}
------------------------------------------------------------------------------
Hierarchical injectors
~~~~~~~~~~~~~~~~~


There are two injector hierarchies in Angular:

1.  ModuleInjector hierarchy—configure a ModuleInjector in this hierarchy using an @NgModule() or @Injectable() providedIn.

	--> 	@NgModule()   ---  may be a root module or feature module
	
				root module --   this available for all modules/entire project.
				feature module --   this available only within that feature module only. 
	
	--->  @Injectable({ providedIn: 'root'  } )    --- this option available from Angular 9 onwards.	
					--- root option indicates it will be registered under root module. 
			@Injectable({ providedIn: 'feature_module_name'  } ) 
			@Injectable({ providedIn: 'admin'  } ) 
			

Note:  Angular follows Singleton 	pattern on the object creation of the servcie.


2.  ElementInjector hierarchy—created implicitly at each DOM element. An ElementInjector is empty by default unless you configure it in the providers property on @Directive() or @Component().

		
			@Component({
					selector: 'app-demo',
					templateUrl: './demo.component.html',
					styleUrls: ['./demo.component.css'],
					providers : [DataService]
			})
			
			
			@Directive({
					selector: 'app-demo',							
					providers : [DataService]
			})
			
			Note:  Provide service registeration at component level will generate separate instance of the service object.